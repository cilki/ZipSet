plugins {
	id 'eclipse'
	id 'jacoco'
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

eclipse {
	project {
		name = 'ZipSet'
		comment = 'A small library for building incremental zip files'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.4.2'

	// https://github.com/zeroturnaround/zt-zip
	testImplementation 'org.zeroturnaround:zt-zip:1.13'

	// https://github.com/qos-ch/slf4j
	implementation 'org.slf4j:slf4j-api:1.7.26'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		xml.enabled true
		html.enabled false
	}
}

check.dependsOn jacocoTestReport

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
	from javadoc
	archiveClassifier = 'javadoc'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = 'com.github.cilki'
			artifactId = 'zipset'
			version = '1.0.0'

			from components.java
			artifact sourcesJar
			artifact javadocJar
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			pom {
				name = 'ZipSet'
				description = 'A Java library for building zip files lazily'
				url = 'https://github.com/cilki/ZipSet'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'cilki'
						name = 'Tyler Cook'
						email = 'tcc@sandpolis.com'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/cilki/ZipSet.git'
					developerConnection = 'scm:git:ssh://git@github.com/cilki/ZipSet.git'
					url = 'https://github.com/cilki/ZipSet'
				}
			}
		}
	}
	repositories {
		maven {
			url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			credentials {
				username sonatypeUsername
				password sonatypePassword
			}
		}
	}
}

signing {
	sign publishing.publications.mavenJava
}

javadoc {
	if(JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}
